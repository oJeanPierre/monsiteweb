// üîπ Charger les donn√©es depuis le serveur et les afficher
fetch('http://localhost:3000/data') // Effectue une requ√™te GET vers l'API locale
    .then(response => response.json()) // Convertit la r√©ponse en JSON
    .then(data => afficherDonnees(data)) // Appelle la fonction pour afficher les donn√©es
    .catch(error => console.error('Erreur:', error)); // Affiche une erreur si la requ√™te √©choue

// üîπ Fonction pour afficher les donn√©es dans le tableau
function afficherDonnees(donnees) {
    let tableBody = document.getElementById('table-body'); // S√©lectionne le <tbody> du tableau
    tableBody.innerHTML = ''; // Vide le tableau avant d'ajouter les nouvelles donn√©es

    // Parcourt chaque √©l√©ment de la liste de donn√©es re√ßues
    donnees.forEach(item => {
        let row = document.createElement('tr'); // Cr√©e une nouvelle ligne de tableau
        // Remplit la ligne avec les donn√©es de l'utilisateur
        row.innerHTML = `<td>${item.id}</td><td>${item.nom}</td><td>${item.age}</td>`;
        tableBody.appendChild(row); // Ajoute la ligne au tableau
    });
}

// üîπ Fonction pour afficher la date actuelle format√©e en fran√ßais
function afficherDate() {
    let maintenant = new Date(); // Cr√©e un objet Date repr√©sentant la date actuelle
    let options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }; 
    // D√©finit le format d'affichage (jour de la semaine, ann√©e, mois, jour)
    document.getElementById('date').innerText = maintenant.toLocaleDateString('fr-FR', options); 
    // Affiche la date format√©e dans l'√©l√©ment <p id="date">
}

afficherDate(); // Appelle la fonction pour afficher imm√©diatement la date

// üîπ Fonction pour afficher un message sp√©cial si l'utilisateur est du type "2"
function jetaime() {
    const userType = localStorage.getItem("userType"); // R√©cup√®re le type d'utilisateur depuis localStorage
    if (userType === "2") { // V√©rifie si l'utilisateur a le type "2"
        let phrase = "Je t'aime Princesse"; // Message sp√©cial
        document.getElementById('jtm').innerText = phrase; // Affiche le message dans l'√©l√©ment <p id="jtm">
    }
}

jetaime(); // Ex√©cute imm√©diatement la fonction pour afficher le message si applicable

// üîπ Fonction pour ajouter un utilisateur (exemple)
function ajouterUtilisateur() {
    let newUser = { id: 3, nom: "Charlie", age: 22 }; // D√©finition d'un nouvel utilisateur

    fetch('http://localhost:3000/update', { // Envoie une requ√™te POST √† l'API
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify([...donneesActuelles, newUser]) // Ajoute le nouvel utilisateur aux donn√©es existantes
    }).then(() => location.reload()); // Recharge la page pour afficher les nouvelles donn√©es
}

// üîπ √âcouter la soumission du formulaire pour modifier une entr√©e
document.getElementById('edit-form').addEventListener('submit', function (event) {
    event.preventDefault(); // Emp√™che le rechargement de la page

    // R√©cup√®re les valeurs du formulaire
    const id = document.getElementById('id').value;
    const nom = document.getElementById('nom').value;
    const age = document.getElementById('age').value;

    // Envoie les nouvelles donn√©es au serveur
    fetch('http://localhost:3000/update', {
        method: 'POST', // M√©thode POST pour envoyer des donn√©es
        headers: { 'Content-Type': 'application/json' }, // Indique qu'on envoie du JSON
        body: JSON.stringify({ id: parseInt(id), nom, age: parseInt(age) }) // Convertit l'ID et l'√¢ge en nombres
    })
    .then(response => response.json()) // Convertit la r√©ponse en JSON
    .then(data => {
        console.log('Donn√©es mises √† jour:', data); // Affiche la r√©ponse du serveur
        alert('Modification r√©ussie !'); // Affiche une alerte de confirmation
        location.reload(); // Recharge la page pour voir les changements
    })
    .catch(error => console.error('Erreur:', error)); // G√®re les erreurs en les affichant
});

// üîπ Fonction pour charger les donn√©es depuis le serveur et les afficher
function fetchData() {
    fetch('http://localhost:3000/data') // Requ√™te GET vers l'API
        .then(response => response.json()) // Convertit la r√©ponse en JSON
        .then(data => afficherDonnees(data)) // Affiche les donn√©es dans le tableau
        .catch(error => console.error('Erreur:', error)); // G√®re les erreurs
}

// üîπ Charger les donn√©es d√®s que la page est ouverte
fetchData();
